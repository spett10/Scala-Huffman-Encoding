import scala.collection.immutable.SortedSet

object Huffman {

  def ??? = throw new RuntimeException("Method not implemented...")

  /**
   * **************************
   * Part 1: Basics
   */
  def weight(tree: HuffTree): Int = tree match {
		case Leaf(char,vaegt) => vaegt
		case Node(vaegt,left,right) => weight(left) + weight(right)
  }

  //Combine two HuffTrees into a single HuffTree
  def combine(left: HuffTree, right: HuffTree): HuffTree = 
  (Node((weight(left)+weight(right)),left,right))


  /**
   * **************************
   * Part 2: Generating the HuffTree
   */

  //Generate a list of (char,frequency) pairs.
  def frequencies(chars: List[Char]): List[(Char, Int)] = ???

  //We use 'SortedSet' in place of a PriorityQueue because Scala currently
  //does not support an immutable implementation of PQ's. 
  //This is okay since no two trees are equivalent.
  def orderedLeaves(freqs: List[(Char, Int)]): SortedSet[HuffTree] =
    SortedSet[HuffTree](freqs.map(Function.tupled(Leaf)): _*)

  //Repeatedly combine the 2 smallest elements and reinsert in the SortedSet
  //to produce the final HuffTree
  def combineTrees(trees: SortedSet[HuffTree]): HuffTree = ???

  //Using 'frequencies', 'orderedLeaves', and 'combine', create the HuffTree
  def createCodeTree(chars: List[Char]): HuffTree = ???


  /**
   * **************************
   * Part 3: Encoding and Decoding
   */
  type Bit = Int
  val One = 1
  val Zero = 0

  //To speed up encoding, let's use a hash-table
  type CodeTable = Map[Char, List[Bit]]
  
  //Convert HuffTree recursively to a codetable
  def convert(tree: HuffTree): CodeTable = ???

  //Given 'table', return the bit-representation of 'char'
  def codeBits(table: CodeTable)(char: Char): List[Bit] = ???
  
  //Given a tree and an encoded bit-string, return the first character along with 
  //the remaining part of the bit-string
  def getLetter(tree: HuffTree, bits: List[Bit]): (Char, List[Bit]) = ???

  //Use a CodeTable to encode a text
  def encode(tree: HuffTree)(text: List[Char]): List[Bit] = ???
  
  //Using 'getLetter', decode 'bits' using a HuffTree
  def decode(tree: HuffTree)(bits: List[Bit]): List[Char] = ???
  
  
  
}
